{% include 'header' %}

#import "{{ prefix }}{{ module_info.name }}Router.h"

#import "{{ prefix }}{{ module_info.name }}ViewController.h"
#import "{{ prefix }}{{ module_info.name }}Presenter.h"
#import "{{ prefix }}{{ module_info.name }}Interactor.h"

#import "{{ prefix }}{{ module_info.name }}ModuleDelegateInterface.h"
#import "{{ prefix }}{{ module_info.name }}InteractorInput.h"
#import "{{ prefix }}{{ module_info.name }}InteractorOutput.h"


static NSString * {{ module_info.name }}ViewControllerIdentifier = @"{{ prefix }}{{ module_info.name }}ViewController";

@interface {{ prefix }}{{ module_info.name }}Router ()

@property (weak, nonatomic) {{ prefix }}{{ module_info.name }}ViewController *userInterface;
@property (weak, nonatomic) {{ prefix }}{{ module_info.name }}Presenter *presenter;

@end


@implementation {{ prefix }}{{ module_info.name }}Router

#pragma mark - Assembly
- (void)presentInterfaceFromViewController:(UIViewController *)viewController
                                    inView:(UIView *)view
                                  delegate:(id <{{ prefix }}{{ module_info.name }}ModuleDelegateInterface>)delegate {

    {{ prefix }}{{ module_info.name }}ViewController * userInterface = [self viewControllerFromStoryboard];
    self.userInterface = userInterface;

    [self configureDependencies];
    [self.presenter setDelegate:delegate];

    [viewController addChildViewController:userInterface];

    [userInterface willMoveToParentViewController:viewController];

    [view addSubview:userInterface.view];
    [userInterface didMoveToParentViewController:viewController];
}

- (void)configureDependencies {

    {{ prefix }}{{ module_info.name }}Presenter *presenter = [[{{ prefix }}{{ module_info.name }}Presenter alloc] init];
    {{ prefix }}{{ module_info.name }}Interactor *interactor = [[{{ prefix }}{{ module_info.name }}Interactor alloc] init];

    presenter.userInterface = self.userInterface;
    self.userInterface.presenter = presenter;

    self.presenter = presenter;
    presenter.router = self;

    presenter.interactor = interactor;
    interactor.presenter = presenter;
}

- (void)dismissInterface {

    if (self.userInterface.navigationController) {
        [self.userInterface.navigationController popViewControllerAnimated:YES];
    } else {
        [self.userInterface dismissViewControllerAnimated:YES completion:nil];
    }
}

#pragma mark - Storyboard
- ({{ prefix }}{{ module_info.name }}ViewController *)viewControllerFromStoryboard {

    UIStoryboard *storyboard = [self storyboard];
    {{ prefix }}{{ module_info.name }}ViewController *viewController = [storyboard instantiateViewControllerWithIdentifier:{{ module_info.name }}ViewControllerIdentifier];

    return viewController;
}
- (UIStoryboard *)storyboard {

    UIStoryboard *storyboard = [UIStoryboard storyboardWithName:<#(nonnull NSString *)#>
                                                         bundle:[NSBundle mainBundle]];
    return storyboard;
}

@end
